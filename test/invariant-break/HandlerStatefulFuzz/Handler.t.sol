// SPDX-License-Identifier: MIT
pragma solidity 0.8.20;

import {Test} from "../../../lib/forge-std/src/Test.sol";
import {HandlerStatefulFuzzCatches} from "../../../src/invariant-break/HandlerStatefulFuzzCatches.sol";
import {YeildERC20} from "../../mocks/YeildERC20.sol";
import {MockUSDC} from "../../mocks/MockUSDC.sol";

contract Handler is Test {
    HandlerStatefulFuzzCatches handlerStatefulFuzzCatches;
    YeildERC20 yeildERC20;
    MockUSDC mockUSDC;
    address user;

    constructor(address _user, address _yeildERC20, address _mockUSDC) {
        user = _user;
        yeildERC20 = _yeildERC20;
        mockUSDC = _mockUSDC;
    }

    function depositYeildERC20(yeildERC20, uint256 _amount) public {
        _amount = bound(yeildERC20, 0, yeildERC20.totalSupply());

        vm.startPrank(user);
        yeildERC20.approve(address(handlerStatefulFuzzCatches), _amount);
        user.depositToken(yeildERC20, _amount);
        vm.endPrank();

        assertEq(balanceOf(address(user)) == 0);
    }

    function depositMockUSDC(mockUSDC, uint256 _amount) public {
        _amount = bound(mockUSDC, 0, mockUSDC.balanceOf(user));

        vm.startPrank(user);
        mockUSDC.approve(address(handlerStatefulFuzzCatches), _amount);
        user.depositToken(mockUSDC, _amount);
        vm.stopPrank();

        assertEq(balanceOf(address(user)) == 0);
    }

    function withdrawYeildERC20(yeildERC20) public {
        vm.prank(user);
        handlerStatefulFuzzCatches.withdrawToken(yeildERC20);
        vm.stopPrank();
    }

    function withdrawMockUsdc(mockUSDC) public {
        vm.prank(user);
        handlerStatefulFuzzCatches.withdrawToken(mockUSDC);
        vm.stopPrank();
    }
}
